<style lang="less">
input[disabled] {
  background-color: #e7e7e7;
}
.main {
  width: 100%;
  height: 100vh;
  position: relative;
  .main-wrap {
    position: absolute;
    width: 100%;
    height: 100vh;
  }
  .f1-wrap {
  }
  .f1-wrap > view {
  }
  .level2-scroll {
    overflow-y: scroll;
    height: 86vh;
  }
}

page {
  background-color: #f7f7f7;
}
.tab {
  background-color: #fe536f;
  color: #fff;
}
.tab-item {
  height: 6vh;

  text-align: center;
  view {
    display: inline-block;
    line-height: 6vh;
    height: 6vh;
  }
  & .sel {
    border-bottom: 4rpx solid #fff;
    font-weight: bolder;
  }
}
.level1 view {
  width: 200rpx;
  font-size: 30rpx;
  height: 100rpx;
  line-height: 100rpx;
  text-align: center;
  background-color: #fff;
  color: #666666;
}
.level1 view.sel {
  background-color: #f7f7f7;
  color: #333;
  font-weight: bolder;
}
.level1-name {
  font-size: 28rpx;
  height: 100rpx;
  line-height: 100rpx;
  color: #333333;
  font-weight: bolder;
}
.level2 view {
  display: inline-block;
  width: 156rpx;
  height: 54rpx;
  text-align: center;
  line-height: 54rpx;
  background-color: #fff;
  margin-right: 20rpx;
  margin-bottom: 20rpx;
  font-size: 26rpx;
  color: #666666;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0 10rpx;
}
.level2 view.sel {
  color: #f51455;
}
.foot-btns {
  position: fixed;
  z-index: 2;
  height: 8vh;
  line-height: 8vh;
  text-align: center;
  font-size: 32rpx;
  width: 100%;
  bottom: 0;
  left: 0;
  .btn-edit {
    color: #fe607a;
    background-color: #ffe2e7;
    width: 280rpx;
  }
  .btn-ok {
    color: #fff;
    background-color: #fe536f;
  }
  .btn-ok__disable {
    color: #fff;
    background-color: #ccc;
  }
}
.form-label {
  font-size: 28rpx;
  color: #666;
  padding: 20rpx 0;
}
.form-input {
  border: 1rpx solid #e2e8e0;
  border-radius: 6rpx;
  height: 76rpx;
  line-height: 76rpx;
  padding: 0 20rpx;
}
.btn-set {
  height: 76rpx;
  line-height: 76rpx;
  text-align: center;
  color: #fff;
  background-color: #fe536f;
  width: 180rpx;
  border-radius: 6rpx;
}
.w510 {
  width: 510rpx;
}
.w400 {
  width: 400rpx;
}
.p-img {
  width: 150rpx;
  height: 150rpx;
  position: relative;
  display: inline-block;
  margin-right: 36rpx;
  margin-top: 20rpx;
  vertical-align: middle;
  .img {
    width: 150rpx;
    height: 150rpx;
    background-color: #cccccc;
    overflow: hidden;
  }
  .del {
    width: 36rpx;
    height: 36rpx;
    background: url("https://j.vzan.cc/miniapp/img/business/close.png")
      no-repeat center center;
    background-size: 100% 100%;
    top: -18rpx;
    right: -18rpx;
    position: absolute;
  }
  &.add {
    border: 4rpx dashed #999999;
    text-align: center;
    .camera {
      width: 38rpx;
      height: 35rpx;
      background: url("https://j.vzan.cc/miniapp/img/business/camera.png")
        no-repeat center center;
      background-size: 100% 100%;
    }
  }
}
.p-img:nth-of-type(4n) {
  margin-right: 0;
}
.p-img > view {
  height: 150rpx;
}
.mask-win {
  position: fixed;
  width: 100%;
  top: 0;
  bottom: 0;
  z-index: 100;

  .mask {
    position: fixed;
    width: 100%;
    top: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 101;
  }
  .edit {
    width: 100%;
    position: absolute;
    z-index: 102;
    bottom: 0;
    left: 0;
    background-color: #fff;
    .head {
      text-align: center;
      height: 117rpx;
      line-height: 117rpx;
      font-size: 30rpx;
      color: #333333;
    }
    .input {
      height: 100rpx;
      margin: 0 auto;
      border-radius: 6rpx;
      text-align: center;
      border: 1rpx solid #e2e8e0;
      border-radius: 6rpx;
    }
  }
}
.attr-blank {
  text-align: center;
  padding-top: 300rpx;
  image {
    width: 414rpx;
  }
}
.p-attr > view {
  padding: 20rpx 30rpx;
  background-color: #f5f5f5;
  color: #666666;
  margin-right: 20rpx;
  white-space: nowrap;
  display: inline-block;
  vertical-align: middle;
  margin-top: 20rpx;
  border-radius: 6rpx;
  &.sel {
    color: #f51455;
  }
}
.attr-selected {
  background-color: #fff;
  color: #333;
  .head {
    text-align: center;
    font-weight: bold;
    font-size: 32rpx;
    height: 88rpx;
    line-height: 88rpx;
  }
  .w-187 {
    width: 187rpx;
  }
  .w1 {
    width: 180rpx;
  }
  .w2 {
    width: 389rpx;
  }
  .w3 {
    width: 179rpx;
  }
  .b-r-b {
    border-right: 1rpx solid #f7f7f7;
    border-bottom: 1rpx solid #f7f7f7;
  }
  .b-r {
    border-right: 1rpx solid #f7f7f7;
  }
  .b-b {
    border-bottom: 1rpx solid #f7f7f7;
  }
  .row {
    height: 110rpx;
    line-height: 110rpx;
    text-align: center;
    view {
      padding: 0 20rpx;
      white-space: nowrap;
    }
    .price {
      width: 110rpx;
      height: 60rpx;
      border: 4rpx dashed #e7e7e7;
    }
    .photo {
      width: 80rpx;
      height: 80rpx;
      border: 4rpx dashed #e7e7e7;
      background: url(https://j.vzan.cc/miniapp/img/business/camera2.png)
        no-repeat center center;
      background-size: 32rpx 29rpx;
    }
    .attr-img {
      width: 80rpx;
      height: 80rpx;
    }
  }
  .del {
    width: 100rpx;
    height: 60rpx;
    border: 1px solid #53a3fe;
    border-radius: 6rpx;
    color: #53a3fe;
    text-align: center;
    line-height: 60rpx;
    display: inline-block;
  }
  .btns {
    padding: 16rpx 20rpx;
    text-align: right;
  }
  .btn-auto {
    padding: 20rpx 27rpx;
    min-width: 180rpx;
    text-align: center;
    background-color: #fe536f;
    color: #fff;
    font-size: 28rpx;
    border-radius: 6rpx;
    margin-right: 20rpx;
    display: inline-block;
    vertical-align: middle;
  }
  @import "../lib/wxParse/wxParse.wxss";
}
.w-small {
}
.edit-list {
  position: absolute;
  top: 0;
  width: 100%;
  height: 94vh;
  z-index: 3;
  background-color: #f7f7f7;
  padding-top: 20rpx;
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  .head {
    text-align: center;
    height: 89rpx;
    line-height: 88rpx;
    border-bottom: 1rpx solid #f7f7f7;
    text {
      display: inline-block;
      margin: 0 auto;
      height: 88rpx;
      line-height: 88rpx;
      color: #333333;
      font-size: 32rpx;
      &.sel {
        border-bottom: 4rpx solid #333333;
        font-weight: bolder;
      }
    }
  }
  .edit-list-item {
    height: 110rpx;
    color: #666666;
    font-size: 32rpx;
    padding: 0 20rpx;
    border-bottom: 1rpx solid #f7f7f7;
  }
  .edit-list-btn {
    display: inline-block;
    padding: 16rpx 20rpx;
    border-radius: 6rpx;
    margin-left: 20rpx;
    &.blue {
      color: #53a3fe;
      border: 1rpx solid #53a3fe;
    }
    &.red {
      color: #ff6565;
      border: 1rpx solid #ff6565;
    }
  }
}
</style>

<!--第三步：使用组件-->
<template>
  <import src="../lib/wxParse/wxParse.wxml" />
  <view wx:if="{{!ispost}}" class="main">
    <view class="f fv main-wrap">
      <view class="tab f fc">
        <view class="f1 tab-item " wx:for="{{tab}}" @tap="changeTab({{index}})">
          <view class="{{index==tabSelectedIndex?'sel':''}}">{{item.name}}</view>
        </view>
      </view>
      <view class="f1 rel" style="overflow-y:scroll;-webkit-overflow-scrolling: touch;">
        <view class="f1-wrap">
          <view hidden="{{tabSelectedIndex!==0}}" class="rel">
            <!--如果开启二级分类-->
            <view wx:if="{{firstLevel.length>0}}" class="f h-full abs w-full">
              <view class="level1">
                <view wx:for="{{firstLevel}}" class="{{ptypeSelectedId==item.id?'sel':''}}" @tap="scrollToType({{item.id}})">{{item.name}}</view>
              </view>
              <scroll-view scroll-y class="f1 pl20 level2-scroll" scroll-into-view="{{scrollToId}}">
                <block wx:for="{{firstLevel}}" wx:for-index="index">
                  <view class="level1-name" id="ptype-{{item.id}}">{{item.name}}</view>
                  <view class="level2">
                    <view class="{{chileItem.sel?'sel':''}}" wx:for="{{item.children}}" wx:for-item="chileItem" wx:for-index="index2" @tap='chooseType({{chileItem.id}},{{chileItem.sel}})'>{{chileItem.name}}</view>
                  </view>
                </block>
              </scroll-view>
            </view>
            <!--只有一级分类-->
            <view wx:else class="f h-full abs w-full">
              <view class="p20">
                <view class="level2">
                  <view class="{{chileItem.sel?'sel':''}}" wx:for="{{bigType}}" wx:for-item="chileItem" wx:for-index="index2" @tap='chooseType({{chileItem.id}},{{chileItem.sel}})'>{{chileItem.name}}</view>

                </view>
              </view>
            </view>

            <view class="edit-list" hidden="{{!show_edit_typelist}}">
              <view class="bg-w">
                <view wx:if="{{firstLevel.length>0}}">
                  <view class="f fc fc-h head">
                    <view class="f1" @tap="change_edit_type_list(0)">
                      <text class="{{edit_type_list==0?'sel':''}}">大类</text>
                    </view>
                    <view class="f1" @tap="change_edit_type_list(1)">
                      <text class="{{edit_type_list==1?'sel':''}}">小类</text>
                    </view>
                  </view>
                  <!--大类列表-->
                  <view class="" hidden="{{edit_type_list==1}}">
                    <view class="edit-list-item f fc" wx:for="{{firstLevel}}">
                      <view class="f1">{{item.name}}</view>
                      <view class="f fc">
                        <view class="edit-list-btn blue" @tap="del_good_type({{item.id}})">删除</view>
                        <view class="edit-list-btn blue" @tap="update_good_type({{item.id}},{{item.name}},{{item.parentId}})">修改</view>
                        <view class="edit-list-btn red" @tap="add_type(0,'',{{item.id}})">+小类</view>
                      </view>
                    </view>
                  </view>
                  <!--小类列表-->
                  <view class="" hidden="{{edit_type_list==0}}">
                    <block wx:for="{{firstLevel}}" wx:for-item="item1" wx:for-index="index1">
                      <view class="edit-list-item f fc" wx:for="{{item1.children}}" wx:for-item="item2">
                        <view class="f1">{{item2.name}}</view>
                        <view class="f fc">
                          <view class="edit-list-btn blue" @tap="del_good_type({{item2.id}})">删除</view>
                          <view class="edit-list-btn blue" @tap="update_good_type({{item2.id}},{{item2.name}},{{item2.parentId}})">修改</view>
                        </view>
                      </view>
                    </block>

                  </view>
                </view>
                <view wx:else>
                  <view class="edit-list-item f fc" wx:for="{{bigType}}">
                    <view class="f1">{{item.name}}</view>
                    <view class="f fc">
                      <view class="edit-list-btn blue" @tap="del_good_type({{item.id}})">删除</view>
                      <view class="edit-list-btn blue" @tap="update_good_type({{item.id}},{{item.name}},{{item.parentId}})">修改</view>
                      <!-- <view class="edit-list-btn red" @tap="add_type(0,'',{{item.id}})">+小类</view> -->
                    </view>
                  </view>
                </view>
              </view>
              <view class="h140"></view>
              <view class="f foot-btns z-4">
                <view class="btn-edit" @tap="edit_typelist">关闭</view>
                <view class="f1 btn-ok" @tap="add_type(0,'',0)" wx:if="{{edit_type_list==0}}">
                  <text wx:if="{{firstLevel.length>0}}">新增大类</text>
                  <text wx:else>新增分类</text>
                </view>
                <view class="f1 btn-ok" @tap="add_type(0,'',{{firstLevelId}})" wx:if="{{edit_type_list==1&&firstLevel.length>0}}">新增小类</view>
              </view>
            </view>
            <view class="h140"></view>
            <view class="f foot-btns">
              <view class="btn-edit" @tap="edit_typelist">编辑分类</view>
              <view class="f1 btn-ok" @tap="choose_type_ok">确认选择</view>
            </view>
          </view>
          <!--详情-->
          <view hidden="{{tabSelectedIndex!==1}}" class="p20 bg-w">
            <view class="form-label">商品名称</view>
            <input type="text" class="form-input" value="{{p.name}}" bindinput="input_p_name" maxlength="100" placeholder="请输入产品名称" placeholder-class="ccc" />
            <view class="form-label">商品库存</view>
            <view class="f fc">
              <input type="number" value="{{p.stock}}" bindinput="input_p_stock" class="form-input w-small" disabled="{{!p.stockLimit||attrTable_fmt.length>0}}" placeholder="请输入商品库存" placeholder-class="ccc" />
              <view class="pl20 rel">
                <checkbox-group>
                  <label>
                    <checkbox color="#fe536f" checked="{{p.stockLimit}}" /> 限制库存
                  </label>
                </checkbox-group>
                <view style="position:absolute;left:0;top:0;right:0;bottom:0;z-index:2;" @tap="click_p_stockLimit"></view>
              </view>
            </view>

            <view class="form-label">虚拟销量</view>
            <view class="f fc">
              <input type="text" class="form-input w-small" value="{{p.virtualSalesCount}}" bindinput="input_p_virtualSalesCount" placeholder="" placeholder-class="ccc" />
              <view class="pl20">
                <view class="ccc">当前实际销量：{{p.salesCount}}</view>
              </view>
            </view>

            <view class="form-label">商品价格</view>
            <view class="f fc">
              <input type="digit" class="form-input w-small" value="{{p.price}}" bindinput="input_p_price" disabled="{{!canSetPrice}}" placeholder="请设置产品价格" placeholder-class="ccc" />
              <view class="pl20">
                <view class="btn-set" @tap="click_set_attr">设置规格</view>
              </view>
            </view>
            <view>
              <text class="ccc">设置规格时将取规格最小价格</text>
            </view>
            <view class="form-label">商品单位</view>
            <view class="f fc">
              <input type="text" class="form-input w-small" value="{{p.unit}}" bindinput="input_p_unit" placeholder="请设置产品单位" placeholder-class="ccc" />
              <!-- <view class="pl20">
            <view class="btn-set">选择单位</view>
          </view> -->
            </view>

            <view class="form-label">商品重量</view>
            <view class="f fc">
              <input type="digit" class="form-input w-small" value="{{p.Weight}}" bindinput="input_p_Weight" placeholder="请输入产品重量" placeholder-class="ccc" />
              <view class="ml20">kg</view>
            </view>

            <view class="form-label">商品主图</view>
            <view class="p-imgs">
              <!--有图-->
              <view class="p-img" wx:if="{{p.img}}">
                <image class="img" src="{{p.img}}" mode="scaleToFill"></image>
                <view class="del" @tap="del_p_img"></view>
              </view>
              <!--无图-->
              <view class="p-img add" wx:else>
                <view class="f fc fc-h" @tap="choose_p_img">
                  <view>
                    <view class="camera"></view>
                    <!-- <view class="f22 c999 mt10">1/1</view> -->
                  </view>
                </view>
              </view>
            </view>

            <view class="form-label">商品轮播图</view>
            <view class="p-imgs">
              <view class="p-img" wx:for="{{bannerImg}}">
                <image class="img" src="{{item}}" mode="scaleToFill"></image>
                <view class="del" @tap="del_p_slideimg({{index}})"></view>
              </view>

              <view class="p-img add">
                <view class="f fc fc-h" @tap="choose_slideimg">
                  <view>
                    <view class="camera"></view>
                    <view class="f22 c999 mt10">{{bannerImg.length}}/8</view>
                  </view>
                </view>
              </view>
            </view>

            <view class="form-label">商品详情</view>
            <view>
              <view class="btn-set" @tap="editContent({{p.id}})">设置详情</view>
            </view>
            <view class="p-info">
              <template is="wxParse" data="{{wxParseData:descriptionNodes.nodes}}" />
            </view>
            <view class="h140"></view>
            <view class="f foot-btns">
              <view class="btn-edit" @tap="cancel">取消</view>
              <view class="f1 btn-ok" @tap="save">保存</view>
            </view>
          </view>
          <!--规格-->
          <view hidden="{{tabSelectedIndex!==2}}">

            <view class='attr-selected'>
              <view class="head f">
                <view class="w1 b-r-b">规格</view>
                <view class="f1 b-r-b">规格值</view>
                <view class="w3 b-b"></view>
              </view>
              <view class="row f" wx:for="{{pickspecification_fmt}}">
                <view class="w1 c666 b-r-b line line1">{{item.name}}</view>
                <view class="f1 b-r-b">{{item.childrenNames}}</view>
                <view class="w3 b-b f fc fc-h">
                  <view class="del" @tap="remove_attr({{index}})">删除</view>
                </view>
              </view>

              <view class="btns">
                <view class="btn-auto" wx:if="{{attrTable_fmt.length>0}}" @tap="show_batch_modal">批量设置数值</view>
                <view class="btn-auto" @tap="show_attr_modal"> 添加规格</view>
              </view>
            </view>

            <!--规格组合-->
            <view class="mt20">
              <view class='attr-selected'>
                <view class="head f">
                  <view class="f1 b-r-b">规格组合</view>
                  <view class="w-187 b-r-b">价格</view>
                  <view class="w-187 b-r-b">库存</view>
                  <view class="w-187 b-r-b">图片</view>
                </view>
                <view class="row f" wx:for="{{attrTable_fmt}}">
                  <view class="f1 c666 b-r-b line line1">{{item.name}}</view>
                  <view class="w-187 b-r-b f fc fc-h">
                    <input class="price" type="digit" placeholder="0.00" bindinput='inputAttrPrice({{index}})' value="{{item.price}}" />
                  </view>
                  <view class="w-187 b-r-b f fc fc-h">
                    <input class="price" type="number" bindinput='inputAttrStock({{index}})' placeholder="" value="{{item.stock}}" disabled="{{!p.stockLimit}}" />
                  </view>
                  <view class="w-187 b-r-b f fc fc-h" @tap="pickImg({{index}})">
                    <image class="attr-img" wx:if="{{item.imgUrl}}" src="{{item.imgUrl}}"></image>
                    <view class="photo" wx:else></view>
                  </view>
                </view>

              </view>
            </view>
            <view class="h140"></view>
            <view class="f foot-btns">
              <view class="btn-edit" @tap="eidt_attrlist">编辑规格</view>
              <view class="f1 btn-ok" @tap="saveTemp">保存，并返回商品详情</view>
            </view>

            <!--编辑规格-->
            <view class="edit-list" hidden="{{!show_edit_attrlist}}">
              <view class="bg-w">
                <view wx:if="{{firstAttr.length>0}}">
                  <view class="f fc fc-h head">
                    <view class="f1" @tap="change_edit_attr_list(0)">
                      <text class="{{edit_attr_list==0?'sel':''}}">规格</text>
                    </view>
                    <view class="f1" @tap="change_edit_attr_list(1)">
                      <text class="{{edit_attr_list==1?'sel':''}}">规格值</text>
                    </view>
                  </view>
                  <!--规格列表-->
                  <view class="" hidden="{{edit_attr_list==1}}">
                    <view class="edit-list-item f fc" wx:for="{{firstAttr}}">
                      <view class="f1">{{item.name}}</view>
                      <view class="f fc">
                        <view class="edit-list-btn blue" @tap="del_good_attr({{item.id}})">删除</view>
                        <view class="edit-list-btn blue" @tap="update_good_attr({{item.id}},{{item.name}},{{item.parentid}})">修改</view>
                        <view class="edit-list-btn red" @tap="add_attr(0,'',{{item.id}})">+规格值</view>
                      </view>
                    </view>
                  </view>
                  <!--规格值列表-->
                  <view class="" hidden="{{edit_attr_list==0}}">
                    <block wx:for="{{firstAttr}}" wx:for-item="item1" wx:for-index="index1">
                      <view class="edit-list-item f fc" wx:for="{{item1.children}}" wx:for-item="item2">
                        <view class="f1">{{item2.name}}</view>
                        <view class="f fc">
                          <view class="edit-list-btn blue" @tap="del_good_attr({{item2.id}})">删除</view>
                          <view class="edit-list-btn blue" @tap="update_good_attr({{item2.id}},{{item2.name}},{{item2.parentid}})">修改</view>
                        </view>
                      </view>
                    </block>

                  </view>
                </view>
                <view wx:else>

                </view>
              </view>
              <view class="h140"></view>
              <view class="f foot-btns z-4">
                <view class="btn-edit" @tap="eidt_attrlist">关闭</view>
                <view class="f1 btn-ok" @tap="add_attr(0,'',0)" wx:if="{{edit_attr_list==0}}">新增规格</view>
                <view class="f1 btn-ok" @tap="add_attr(0,'',{{firstAttrId}})" wx:if="{{edit_attr_list==1&&firstAttr.length>0}}">新增规格值</view>
              </view>
            </view>

          </view>
          <view hidden="{{tabSelectedIndex!==3}}"></view>
          <view hidden="{{tabSelectedIndex!==4}}"></view>
        </view>
      </view>
    </view>

    <!-- <wxc-loadmore is-end="{{!vm.ispost&&vm.loadall}}" icon="{{true}}"></wxc-loadmore> -->
    <wxc-toast is-show="{{$toast.show}}" text="{{$toast.msg}}"></wxc-toast>
    <!--弹出窗-->
    <!--批量设置-->
    <view class="mask-win" hidden="{{!show_batch}}">
      <view class="mask" @tap="hide_batch_modal"></view>
      <view class="edit" style="height:500rpx;">
        <view class="p20">
          <view class='head'>批量设置价格及库存</view>
          <view class="f fc fc-h p20 tc">
            <view class="f1">价格</view>
            <view class="f1">库存</view>
          </view>
          <view class="f fc fc-h">
            <view class="f1"><input type="digit" class="input" value="{{batchPrice}}" bindinput="input_batch_price" placeholder="请输入价格" placeholder-class="ccc" /></view>
            <view class="f1 ml20"><input type="number" disabled="{{!p.stockLimit}}" class="input" value="{{batchStock}}" bindinput="input_batch_stock" placeholder="请输入库存" placeholder-class="ccc" /></view>
          </view>
        </view>
        <view class="f foot-btns">
          <view class="f1 btn-edit" @tap="hide_batch_modal">取消</view>
          <view class="f1 btn-ok" @tap="input_batch_ok">确认</view>
        </view>
      </view>
    </view>

    <!--选择规格-->
    <view class="mask-win" hidden="{{!show_attr}}">
      <view class="mask" @tap="hide_attr_modal"></view>
      <view class="edit" style="min-height:370rpx;max-height:940rpx;overflow-y: scroll;-webkit-overflow-scrolling: touch;">
        <view wx:for="{{firstAttr}}" class="pl20" wx:for-index="index">
          <view class="form-label mt20">{{item.name}}</view>
          <view class="p-attr">
            <view class="{{child.sel?'sel':''}}" wx:if="{{item.children}}" @tap="choose_attr({{index}},{{index2}})" wx:for="{{item.children}}" wx:for-item="child" wx:for-index="index2">{{child.name}}</view>
          </view>
        </view>
        <view class="h140"></view>
        <view class="f foot-btns">
          <view class="btn-edit" @tap="hide_attr_modal">取消</view>
          <view class="f1 btn-ok" wx:if="{{attr_pick_nums>0}}" @tap="choose_attr_ok">确认</view>
          <view class="f1 btn-ok__disable" wx:else>确认</view>
        </view>
      </view>
    </view>

    <!--添加分类-->
    <view class="mask-win" hidden="{{!show_addtype}}">
      <view class="mask" @tap="hide_addtype"></view>
      <view class="edit" style="min-height:450rpx;">
        <view class="p20">
          <view class="tc">分类名称</view>
          <view class="mt20 f fc-h" hidden="{{goodTypeModel.parentId<=0}}">
            <picker class="form-input w400 tc" bindchange="bindGoodTypePickerChange" value="{{goodTypeModel.selindex}}" range="{{firstLevel}}" range-key="name">
              <view>
                所属大类：{{firstLevel[goodTypeModel.selindex].name}}
              </view>
            </picker>
          </view>
          <view class="mt20 f fc-h">
            <input type="text" class="form-input w400 tc" maxlength="10" bindinput="input_type_name" value="{{goodTypeModel.name}}" placeholder="请输入分类名称" />
          </view>
        </view>

        <view class="f foot-btns z-5">
          <view class="btn-edit" @tap="hide_addtype">取消</view>
          <view class="f1 btn-ok" wx:if="{{canSaveType}}" @tap="add_good_type_ok">确认</view>
          <view class="f1 btn-ok__disable" wx:else>确认</view>
        </view>
      </view>
    </view>
    <!--添加规格-->
    <view class="mask-win" hidden="{{!show_addattr}}">
      <view class="mask" @tap="hide_addattr"></view>
      <view class="edit" style="min-height:450rpx;">
        <view class="p20">
          <view class="tc" wx:if="{{attrModel.parentid<=0}}">规格名称</view>
          <view class="tc" wx:else>规格值名称</view>
          <view class="mt20 f fc-h" hidden="{{attrModel.parentid<=0}}">
            <picker class="form-input w400 tc" bindchange="bindGoodAttrPickerChange" value="{{attrModel.selindex}}" range="{{firstAttr}}" range-key="name">
              <view>
                所属规格：{{firstAttr[attrModel.selindex].name}}
              </view>
            </picker>
          </view>
          <view class="mt20 f fc-h">
            <input type="text" class="form-input w400 tc" maxlength="10" bindinput="input_attr_name" value="{{attrModel.name}}" />
          </view>
        </view>

        <view class="f foot-btns z-5">
          <view class="btn-edit" @tap="hide_addattr">取消</view>
          <view class="f1 btn-ok" wx:if="{{canSaveAttr}}" @tap="add_good_attr_ok">确认</view>
          <view class="f1 btn-ok__disable" wx:else>确认</view>
        </view>
      </view>
    </view>
  </view>

</template>

<script>
import wepy from "wepy";
import "wepy-async-function";
import { core, vm } from "../lib/core";
import baseMixin from "../mixins/base";
import WxParse from "../lib/wxParse/wxParse.js";
// import
//第一步： 引入组件文件

export default class product_edit extends wepy.page {
  config = {
    navigationBarTitleText: "产品编辑",
    enablePullDownRefresh: false,
    // 引入min组件
    usingComponents: {
      "wxc-toast": "../../packages/@minui/wxc-toast/dist/index",
      "wxc-loadmore": "../../packages/@minui/wxc-loadmore/dist/index"
    }
  };
  //第二步：声明组件
  components = {};
  mixins = [baseMixin];
  //mixins = [Enterprise];
  data = {
    goodTypes: [],
    goodLabels: [],
    goodAttrList: [],
    goodUnits: [],
    goodExtTypes: [],
    batchStock: "", //批量设置时输入的库存
    batchPrice: "", //批量设置时输入的价格
    scrollToId: "",
    tabSelectedIndex: 0,
    ptypeSelectedId: 0,
    bannerImg: [],
    description: "",
    descriptionNodes: {},
    goodTypeModel: {},
    attrModel: {},
    editAttrModel: {},
    edit_type_list: 0, //当前选择的是大类还是小类的tab
    edit_attr_list: 0, //当前选择的是规格还会规格值的tab
    $toast: {
      show: false,
      msg: "",
      inMess: ""
    },
    tab: [
      { name: "分类" },
      { name: "详情" },
      { name: "规格" }
      //{ name: "标签" },
      //{ name: "参数" }
    ],

    vm: JSON.parse(JSON.stringify(vm)),
    goodTypesIndex: -1,
    p: {},
    pickspecification: [],
    keyword: "",
    id: 0,
    ispost: false,
    saving: false,
    show_attr: false, //选择规格弹窗
    show_batch: false, //批量设置弹窗
    show_edit_typelist: false, //编辑分类-分类列表
    show_edit_attrlist: false, //编辑规格-规格列表
    show_addtype: false, //添加大类弹窗
    show_addattr: false,
    attrTable_fmt: []
  };
  computed = {
    firstLevelId() {
      var level1 = this.goodTypes.filter(p => p.parentId == 0);
      if (level1.length > 0) {
        return level1[0].id;
      }
      return 0;
    },
    bigType() {
      var level1 = this.goodTypes.filter(p => p.parentId == -1);
      var that = this;
      level1.forEach(p => {
        p.children = that.goodTypes.filter(item => item.parentId == p.id);
      });
      return level1;
    },
    firstAttrId() {
      var level1 = this.goodAttrList.filter(p => p.parentid == 0);
      if (level1.length > 0) {
        return level1[0].id;
      }
      return 0;
    },
    //如果有parentId=0的分类说明开启了二级分类，默认情况下parentId都为-1
    firstLevel() {
      var level1 = this.goodTypes.filter(p => p.parentId == 0);
      var that = this;
      level1.forEach(p => {
        p.children = that.goodTypes.filter(item => item.parentId == p.id);
      });
      return level1;
    },
    //属性
    attrs() {
      if (this.goodAttrList) {
        var that = this;
        this.goodAttrList.forEach(p => {
          if (p.parentid == 0) {
            p.children = that.goodAttrList.filter(child => {
              return child.parentid == p.id;
            });
          }
        });
      }
      return this.goodAttrList;
    },
    firstAttr() {
      return this.goodAttrList.filter(t => {
        return t.parentid == 0;
      });
    },
    attr_pick_nums() {
      var nums = 0;
      if (this.goodAttrList) {
        var that = this;
        this.goodAttrList.forEach(p => {
          if (p.children) {
            nums += p.children.filter(child => {
              return child.sel;
            }).length;
          }
        });
      }
      return nums;
    },
    pickspecification_fmt() {
      if (this.pickspecification && this.pickspecification.length > 0) {
        this.pickspecification.forEach(p => {
          if (p.items.length > 0) {
            p.childrenNames = p.items
              .map(p => {
                return p.name;
              })
              .join("，");
          }
        });
      }
      return this.pickspecification;
    },
    canSaveType() {
      return core.trim(this.goodTypeModel.name).length > 0;
    },
    canSaveAttr() {
      return core.trim(this.attrModel.name).length > 0;
    },
    canSetPrice() {
      return this.attrTable_fmt.length == 0;
    }
  };
  methods = {
    inputAttrPrice(index, e) {
      this.attrTable_fmt[index].price = Number(e.detail.value) || 0;
    },
    inputAttrStock(index, e) {
      this.attrTable_fmt[index].stock = Number(e.detail.value) || 0;
    },
    bindGoodTypePickerChange(e) {
      console.log(e);
      this.goodTypeModel.parentId = this.firstLevel[Number(e.detail.value)].id;
      this.goodTypeModel.selindex = Number(e.detail.value);
    },
    bindGoodAttrPickerChange(e) {
      this.attrModel.parentid = this.firstAttr[Number(e.detail.value)].id;
      this.attrModel.selindex = Number(e.detail.value);
    },
    //点击 大类，小类
    change_edit_type_list(type) {
      this.edit_type_list = type;
    },
    change_edit_attr_list(type) {
      this.edit_attr_list = type;
    },
    // 添加|修改 分类
    async add_good_type_ok() {
      var that = this;
      wx.showLoading({
        title: "提交中...",
        mask: true
      });
      var model = JSON.parse(JSON.stringify(that.goodTypeModel));
      if (that.firstLevel.length > 0) {
      } else {
        model.parentId = -1;
      }
      var result = await core.GoodType(model);
      console.log(result);
      if (result.isok) {
        await that.loadTypes();
        var msg = model.id > 0 ? "修改成功" : "添加成功";
        wx.showToast({
          title: msg,
          icon: "success",
          duration: 2000
        });
      } else {
        core.alert(result.msg);
      }

      that.initTypeModel();
      wx.hideLoading();
      that.$apply();
    },
    async add_good_attr_ok() {
      var that = this;
      wx.showLoading({
        title: "提交中...",
        mask: true
      });
      var model = JSON.parse(JSON.stringify(that.attrModel));

      var result = await core.GoodAttr(model);
      console.log(result);
      if (result.isok) {
        await that.loadTypes();
        var msg = model.id > 0 ? "修改成功" : "添加成功";
        wx.showToast({
          title: msg,
          icon: "success",
          duration: 2000
        });
      } else {
        core.alert(result.msg);
      }

      that.initAttrModel();
      wx.hideLoading();
      that.$apply();
    },
    //删除分类
    async del_good_type(id) {
      var that = this;
      wx.showModal({
        title: "提示",
        content: "删除后不可恢复，确认删除吗？",
        success: async function(res) {
          if (res.confirm) {
            var model = JSON.parse(JSON.stringify(that.goodTypeModel));
            model.id = id;
            model.act = "del";
            var result = await core.GoodType(model);
            if (result.isok) {
              await that.loadTypes();
              if (result.msg) {
                wx.showToast({
                  title: result.msg,
                  icon: "success",
                  duration: 2000
                });
              }
            } else {
              core.alert(result.msg);
            }
            that.$apply();
          }
        }
      });
    },
    //修改分类
    update_good_type(id, name, pid) {
      this.show_addtype = true;
      this.goodTypeModel.id = id;
      this.goodTypeModel.parentId = pid;
      this.goodTypeModel.name = name;
      if (pid > 0) {
        this.goodTypeModel.selindex = this.firstLevel.findIndex(t => {
          return t.id == pid;
        });
      } else {
        this.goodTypeModel.selindex = 0;
      }
    },
    update_good_attr(id, name, pid) {
      this.show_addattr = true;
      this.attrModel.id = id;
      this.attrModel.parentid = pid;
      this.attrModel.name = name;
      if (pid > 0) {
        this.attrModel.selindex = this.firstAttr.findIndex(t => {
          return t.id == pid;
        });
      } else {
        this.attrModel.selindex = 0;
      }
    },
    input_type_name(e) {
      this.goodTypeModel.name = e.detail.value;
    },
    input_attr_name(e) {
      this.attrModel.name = e.detail.value;
    },
    add_type(id, name, pid) {
      this.show_addtype = true;
      this.goodTypeModel.id = id;
      this.goodTypeModel.parentId = pid;
      this.goodTypeModel.name = name;
      if (pid > 0) {
        this.goodTypeModel.selindex = this.firstLevel.findIndex(t => {
          return t.id == pid;
        });
      } else {
        this.goodTypeModel.selindex = 0;
      }
    },
    hide_addtype() {
      this.initTypeModel();
    },
    hide_addattr() {
      this.initAttrModel();
    },
    //删除规格
    async del_good_attr(id) {
      var that = this;
      wx.showModal({
        title: "提示",
        content: "删除后不可恢复，确认删除吗？",
        success: async function(res) {
          if (res.confirm) {
            var model = JSON.parse(JSON.stringify(that.attrModel));
            model.id = id;
            model.act = "del";
            var result = await core.GoodAttr(model);
            if (result.isok) {
              await that.loadTypes();
              if (result.msg) {
                wx.showToast({
                  title: result.msg,
                  icon: "success",
                  duration: 2000
                });
              }
            } else {
              core.alert(result.msg);
            }
            that.$apply();
          }
        }
      });
    },
    //添加规格
    add_attr(id, name, pid) {
      this.show_addattr = true;
      this.attrModel.id = id;
      this.attrModel.parentid = pid;
      this.attrModel.name = name;
      if (pid > 0) {
        this.attrModel.selindex = this.firstAttr.findIndex(t => {
          return t.id == pid;
        });
      } else {
        this.attrModel.selindex = 0;
      }
    },

    //编辑|隐藏 分类
    edit_typelist() {
      this.show_edit_typelist = !this.show_edit_typelist;
    },
    //编辑|隐藏 规格
    eidt_attrlist() {
      this.show_edit_attrlist = !this.show_edit_attrlist;
    },
    editContent(id) {
      wx.navigateTo({
        url: "/pages/richtxt_edit?id=" + id
      });
    },
    //删除商品图片
    del_p_img() {
      this.p.img = "";
    },
    choose_p_img() {
      var that = this;
      core.upload("img").then(function(urlArray) {
        that.p.img = urlArray[0];
        that.$apply();
      });
    },
    del_p_slideimg(index) {
      this.bannerImg.splice(index, 1);
      this.$apply();
    },
    choose_slideimg() {
      var that = this;
      var maxchoose = 8 - that.bannerImg.length;
      if (that.bannerImg.length >= 8) {
        core.alert("最多只能上传8张图片，如需上传其他图片，请删除后再添加！");
        return;
      }
      core.upload("img", maxchoose).then(function(urlArray) {
        that.bannerImg = that.bannerImg.concat(urlArray);
        that.$apply();
      });
    },
    scrollToType(id) {
      this.scrollToId = "ptype-" + id;
      this.ptypeSelectedId = id;
    },
    changeTab(index) {
      this.tabSelectedIndex = index;
    },
    chooseType(id, sel) {
      this.goodTypes.find(t => {
        return t.id == id;
      }).sel = !sel;
    },
    choose_type_ok() {
      if (
        this.goodTypes.filter(t => {
          return t.sel;
        }).length <= 0
      ) {
        core.alert("请选择产品分类");
        return;
      }
      this.tabSelectedIndex = 1;
    },
    //填写产品名称
    input_p_name(event) {
      this.p.name = event.detail.value;
    },
    //是否限制库存
    click_p_stockLimit(e) {
      var that = this;
      if (that.p.stockLimit) {
        wx.showModal({
          title: "提示",
          content: "不限制库存将清空现在设置的库存数!",
          success: function(res) {
            if (res.confirm) {
              that.p.stock = 0;
              that.p.stockLimit = !that.p.stockLimit;
              that.attrTable_fmt.forEach(a => {
                a.stock = 0;
              });
              that.$apply();
            }
          }
        });
      } else {
        that.p.stockLimit = !that.p.stockLimit;
        that.$apply();
      }
    },
    input_p_stock(e) {
      this.p.stock = parseInt(e.detail.value) || 0;
    },
    //虚拟销量
    input_p_virtualSalesCount(e) {
      this.p.virtualSalesCount = parseInt(e.detail.value) || 0;
    },
    input_p_price(e) {
      this.p.price = Number(e.detail.value);
    },
    input_p_Weight(e) {
      this.p.Weight = parseInt(e.detail.value) || 0;
    },
    input_p_unit(e) {
      this.p.unit = e.detail.value;
    },
    //点击设置规格
    click_set_attr() {
      this.tabSelectedIndex = 2;
    },
    //点击添加规格
    show_attr_modal() {
      //重置所有属性的sel
      if (this.goodAttrList.length > 0) {
        this.goodAttrList.forEach(p => {
          if (p.children) {
            p.children.forEach(pp => {
              pp.sel = false;
            });
          }
        });
      }
      //查询出所有已选择的属性
      var attr_sel = [];
      if (this.pickspecification.length > 0) {
        this.pickspecification.forEach(p => {
          if (p.items && p.items.length > 0) {
            attr_sel = attr_sel.concat(p.items);
          }
        });
      }
      //查询出所有属性值
      var attrval = [];
      if (this.goodAttrList.length > 0) {
        this.goodAttrList.forEach(pp => {
          if (pp.children && pp.children.length > 0) {
            attrval = attrval.concat(pp.children);
          }
        });
      }

      //自动选中已选的属性
      attr_sel.forEach(p => {
        attrval.forEach(pp => {
          if (p.id == pp.id) {
            pp.sel = true;
          }
        });
      });

      this.show_attr = true;
    },
    //隐藏选择属性弹窗
    hide_attr_modal() {
      this.show_attr = false;
    },
    //点击属性
    choose_attr(index, index2) {
      var item = this.firstAttr[index].children[index2];
      var findItem = this.goodAttrList.find(t => {
        return t.id == item.id;
      });
      if (findItem) {
        findItem.sel = !findItem.sel;
      }

      //this.goodAttrList[index].children[index2].sel = !this.goodAttrList[index].children[index2].sel;
    },
    //确定选择属性
    choose_attr_ok() {
      var pickspecification_sel = [];
      //将选中的属性添加到p.pickspecification
      if (this.goodAttrList && this.goodAttrList.length > 0) {
        //查询选中的一级分类
        var level1 = this.goodAttrList.filter(p => {
          return (
            p.children &&
            p.children.length > 0 &&
            p.children.filter(pp => {
              return pp.sel;
            }).length > 0
          );
        });
        if (level1.length > 4) {
          core.alert("最多只能选择4种规格");
          return;
        }
        if (level1 && level1.length > 0) {
          level1.forEach(p => {
            pickspecification_sel.push({
              id: p.id,
              name: p.name,
              parentid: p.parentid,
              items: p.children.filter(pp => {
                return pp.sel;
              })
            });
          });
        }
      }
      if (pickspecification_sel.length > 200) {
        core.alert("最多只能选择200种规格值组合");
        return;
      }
      this.pickspecification = pickspecification_sel;
      this.buildTable();
      this.show_attr = false;
    },
    remove_attr(index) {
      var that = this;
      wx.showModal({
        title: "提示",
        content:
          "删除后将重新建立规格组合，价格、库存、图片将会清空，请谨慎操作",
        success: function(res) {
          if (res.confirm) {
            that.pickspecification.splice(index, 1);
            that.buildTable();
            that.$apply();
          } else if (res.cancel) {
          }
        }
      });
    },
    show_batch_modal() {
      this.show_batch = true;
    },
    //隐藏批量设置弹窗
    hide_batch_modal() {
      this.show_batch = false;
    },
    input_batch_price(e) {
      this.batchPrice = e.detail.value;
    },
    input_batch_stock(e) {
      this.batchStock = e.detail.value;
    },
    //确定批量设置
    input_batch_ok() {
      var price = parseFloat(this.batchPrice) || 0;
      var stock = parseFloat(this.batchStock) || 0;
      if (price < 0) {
        core.alert("请输入价格");
        return;
      }
      if (core.stock < 0) {
        alert("请输入库存");
        return;
      }
      if (this.attrTable_fmt.length > 0) {
        this.attrTable_fmt.forEach(p => {
          p.price = price;
          p.stock = stock;
        });
      }
      this.show_batch = false;
    },
    //点击选择图片
    pickImg(index) {
      var that = this;
      core.upload("img").then(function(urlArray) {
        that.attrTable_fmt[index].imgUrl = urlArray[0];
        that.$apply();
      });
    },

    //将数据临时保存
    saveTemp() {
      /*var tempGoodInfo = core.getStorageSync("tempGoodInfo");
      if (tempGoodInfo == "error") {
        core.alert("保存失败，请重试");
        return;
      }*/
      var that = this;
      if (that.attrTable_fmt.length <= 0) {
        core.alert("请先设置产品规格");
        return;
      } else {
        var result = core.setStorageSync("tempGoodInfo", {
          p: that.p,
          attrTable_fmt: that.attrTable_fmt
        });
        if (result == "error") {
          core.alert("保存失败，请重试");
          return;
        }
        this.p.price = this.attrTable_fmt.sort((a, b) => {
          return a.price - b.price;
        })[0].price;
        this.p.price = Number(this.p.price) || 0;
        if (this.p.price <= 0) {
          core.alert("产品价格不能小于0");
          return;
        }
        that.p.stock = 0;
        this.attrTable_fmt.forEach(t => {
          that.p.stock += Number(t.stock) || 0;
        });
        if (this.p.stockLimit && that.p.stock <= 0) {
          core.alert("选择限制产品库存时，产品库存不能为0");
          return;
        }
      }
      that.$apply();
      this.tabSelectedIndex = 1;
    },
    //保存
    async save() {
      if (this.saving) return;
      var that = this;
      this.saving = true;
      wx.showLoading({
        mask: true,
        title: "保存中"
      });
      //aid
      var currentStore = core.getStorageSync("currentStore");
      var aid = parseInt(currentStore.Id) || -1;
      if (aid < 0) {
        core.alert("保存失败，请重试！,Error：aid<0");
        this.saving = false;
        wx.hideLoading();
        return;
      }
      this.p.aid = aid;
      //名称
      this.p.name = core.trim(this.p.name);
      if (this.p.name.length == "") {
        core.alert("请填写产品名称！");
        this.saving = false;
        wx.hideLoading();
        return;
      }
      if (this.p.name.length > 100) {
        core.alert("产品名称不能超过100个字");
        this.saving = false;
        wx.hideLoading();
        return;
      }

      //库存
      if (this.p.stockLimit) {
        if (!/^\d{0,7}$/.test(this.p.stock) || parseInt(this.p.stock) < 0) {
          core.alert("请输入产品库存,库存只能输入>=0的整数！");
          this.saving = false;
          wx.hideLoading();
          return;
        }
      }
      //图片
      if (this.p.img == "") {
        core.alert("请上传产品图片！");
        this.saving = false;
        wx.hideLoading();
        return;
      }
      //分类
      this.p.ptypes = this.goodTypes
        .filter(t => {
          return t.parentId != 0 && t.sel;
        })
        .map(i => {
          return i.id;
        })
        .join(",");
      if (this.p.ptypes.length <= 0) {
        core.alert("请选择产品分类！");
        this.saving = false;
        wx.hideLoading();
        return;
      }

      //标签

      //参数

      //规格
      if (this.attrTable_fmt && this.attrTable_fmt.length > 0) {
        //检查规格 价格，库存输入是否正确
        this.attrTable_fmt.forEach(p => {});
        for (let index = 0; index < this.attrTable_fmt.length; index++) {
          let p = this.attrTable_fmt[index];
          if (
            !/^\d{1,}.?(\d{0,2})?$/.test(p.price) ||
            !/^\d{1,}.?(\d{0,2})?$/.test(p.originalPrice) ||
            !/^\d{1,}.?(\d{0,2})?$/.test(p.groupPrice)
          ) {
            core.alert("产品价格请输入大于0的数字，最多两位小数！");
            this.saving = false;
            wx.hideLoading();
            return;
          }
        }
        //选择最小价格作为产品的展示价格
        this.p.price = this.attrTable_fmt.sort((a, b) => {
          return a.price - b.price;
        })[0].price;

        this.p.specificationdetail = JSON.stringify(this.attrTable_fmt);
        this.p.pickspecification = JSON.stringify(this.pickspecification);

        var specificationkeys = [];
        var _specification = [];
        if (this.pickspecification.length > 0) {
          this.pickspecification.forEach(function(_item) {
            if (_item.items.length > 0) {
              //保存规格
              specificationkeys.push(_item.id);
              //保存规格值
              _item.items.forEach(function(_item_value) {
                _specification.push(_item_value.id);
              });
            }
          });
        }
        this.p.specificationkeys = specificationkeys.join(",");
        this.p.specification = _specification.join(",");
      }
      //价格
      if (!/^\d*.?\d{0,2}$/.test(this.p.price)) {
        core.alert("产品价格请输入大于0的数字，最多两位小数！");
        this.saving = false;
        wx.hideLoading();
        return;
      } else if (this.p.price <= 0 || this.p.price > 1000000000) {
        core.alert("产品价格请输入大于0小于1000000000的数字，最多两位小数！");
        this.saving = false;
        wx.hideLoading();
        return;
      }
      //轮播图
      that.p.slideimgs = that.bannerImg.join(",");
      //重量，单位kg
      that.p.Weight = that.p.Weight * 1000;
      //运费模板
      //详情
      that.p.description = this.description || "";

      var result = await core.SaveEntGoodsInfo(that.p);
      if (result.isok) {
        try {
          wx.removeStorageSync("temp_p_description_" + that.id);
        } catch (e) {}
        wx.showToast({
          title: result.msg,
          icon: "success",
          duration: 1000
        });
      } else {
        core.alert(result.msg);
      }
      this.saving = false;
      wx.hideLoading();

      that.$apply();
      if (result.isok) {
        setTimeout(() => {
          that.back();
        }, 1000);
      }
    },
    cancel() {
      var that = this;
      wx.showModal({
        title: "提示",
        content: "确定退出么",
        success: function(res) {
          if (res.confirm) {
            that.back();
          }
        }
      });
    }
  };
  back() {
    var pages = getCurrentPages();
    var productPageIndex = pages.findIndex(p => p.route == "pages/product");
    if (productPageIndex == -1) {
      wx.redirectTo({
        url: "/pages/product"
      });
    } else {
      var backNum = pages.length - 1 - productPageIndex;
      wx.navigateBack({
        delta: backNum
      });
    }
  }
  events = {};
  initTypeModel() {
    this.show_addtype = false;
    this.goodTypeModel.id = 0;
    this.goodTypeModel.name = "";
    this.goodTypeModel.parentId = this.firstLevel.length > 0 ? 0 : -1;
  }
  initAttrModel() {
    this.show_addattr = false;
    this.attrModel.id = 0;
    this.attrModel.name = "";
    this.attrModel.parentid = 0;
  }
  async onLoad(options) {
    this.id = options.id || 0;
    if (this.id == 0) {
      wx.setNavigationBarTitle({
        title: "添加产品"
      });
    } else {
      wx.setNavigationBarTitle({
        title: "修改产品"
      });
    }
    await this.loadData();
    this.$apply();
  }
  async onShow() {
    var that = this;
    var temp_description = core.getStorageSync("temp_p_description_" + that.id);
    if (temp_description != "" && temp_description != "error") {
      that.descriptionNodes = WxParse.wxParse(
        "descriptionNodes",
        "html",
        temp_description,
        that,
        5
      );
      this.description = temp_description;
    }
    that.$apply();
  }
  async loadTypes() {
    let result = await core.GetGoodsTypesAll();

    if (result && result.isok) {
      this.goodTypes = result.dataObj.goodTypes;
      this.goodLabels = result.dataObj.goodLabels;
      this.goodAttrList = result.dataObj.goodAttrList;
      this.goodUnits = result.dataObj.goodUnits;
      this.goodExtTypes = result.dataObj.goodExtTypes;
      this.goodTypeModel = result.dataObj.goodTypeModel;
      this.editAttrModel = result.dataObj.attrModel;
      this.attrModel = result.dataObj.attrModel;

      if (this.id == 0) {
        this.p = result.dataObj.goodModel;
      }
      if (this.goodTypes && this.goodTypes.length > 0) {
        var level1 = this.goodTypes.filter(t => {
          return t.parentId == 0;
        });
        if (level1.length > 0) {
          this.ptypeSelectedId = level1[0].id;
        }
      }
      this.initTypes();
    }
    this.$apply();
  }
  initTypes() {
    var that = this;
    //初始化分类
    if (this.p.ptypes && this.p.ptypes.length > 0) {
      this.p.ptypes.split(",").forEach(t => {
        that.goodTypes.forEach(tt => {
          if (t == tt.id) {
            tt.sel = true;
          }
        });
      });
    }
  }
  async loadData() {
    var that = this;
    if (this.ispost) return;
    this.ispost = true;
    wx.showLoading({
      title: "加载中"
    });
    //初始化
    this.goodTypes = [];
    this.p = {};
    this.pickspecification = [];

    if (this.id > 0) {
      let good = await core.GetEntGoodsInfo(this.id);
      if (good && good.isok && typeof good.dataObj == "object") {
        //如果是修改产品，默认进 详情
        //that.tabSelectedIndex = 1;
        var temp_good = good.dataObj;
        //初始化分类
        this.initTypes();
        //初始化规格
        var temp_attr = temp_good.pickspecification;
        if (temp_attr) {
          temp_attr = JSON.parse(temp_attr);
          this.pickspecification = temp_attr;
          this.buildTable();
          temp_good.specificationdetail = JSON.parse(
            temp_good.specificationdetail||'[]'
          );
          //将规格值显示出来
          if (
            temp_good.specificationdetail instanceof Array &&
            this.attrTable_fmt &&
            this.attrTable_fmt.length > 0
          ) {
            temp_good.specificationdetail.forEach(a => {
              that.attrTable_fmt.forEach(aa => {
                if (a.id.toString() === aa.id.toString()) {
                  aa.originalPrice = a.originalPrice;
                  aa.price = a.price;
                  aa.groupPrice = a.groupPrice;
                  aa.stock = a.stock;
                  aa.imgUrl = a.imgUrl;
                }
              });
            });
          }
        }
        //初始化分类
        if (temp_good.ptypes.length > 0) {
          temp_good.ptypes.split(",").forEach(t => {
            that.goodTypes.forEach(tt => {
              if (t == tt.id) {
                tt.sel = true;
              }
            });
          });
        }
        //初始化轮播图
        if (temp_good.slideimgs) {
          this.bannerImg = temp_good.slideimgs.split(",");
        }
        //初始化重量 显示按kg 保存按g
        temp_good.Weight = parseFloat(temp_good.Weight / 1000);

        this.p = temp_good;

        that.descriptionNodes = WxParse.wxParse(
          "descriptionNodes",
          "html",
          that.p.description,
          that,
          5
        );
        this.tabSelectedIndex = 1;
      } else {
        core.alert("请求错误，产品ID为：" + this.id + ",请与管理员联系");
      }
    } else {
      this.tabSelectedIndex = 0;
    }
    this.ispost = false;
    wx.hideLoading();
    //初始化产品分类
    await this.loadTypes();
    this.$apply();
  }
  onPullDownRefresh() {}

  buildTable() {
    var _t = [];
    var that = this;
    this.pickspecification.forEach(function(o) {
      if (o.items.length > 0) {
        _t.push(o.items);
      }
    });
    var _result = [];
    if (_t.length > 1) {
      _result = this.discarts(..._t);
    } else {
      _result = _t[0];
    }
    //创建用于显示的对象
    var table_detail = [];
    if (this.pickspecification.length > 1) {
      _result.forEach(p => {
        table_detail.push({
          id: p
            .map(i => {
              return i.id;
            })
            .join("_"),
          name: p
            .map(i => {
              return i.name;
            })
            .join("-"),
          originalPrice: 0,
          price: 0,
          groupPrice: 0,
          stock: 0,
          imgUrl: ""
        });
      });
    } else if (this.pickspecification.length == 1) {
      _result.forEach(p => {
        table_detail.push({
          id: p.id,
          name: p.name, //that.pickspecification[0].name+"-"+
          originalPrice: 0,
          price: 0,
          groupPrice: 0,
          stock: 0,
          imgUrl: ""
        });
      });
    }
    this.attrTable_fmt = table_detail;
    return _result;
  }
  discarts() {
    //笛卡尔积
    var twodDscartes = function(a, b) {
      var ret = [];
      for (var i = 0; i < a.length; i++) {
        for (var j = 0; j < b.length; j++) {
          ret.push(ft(a[i], b[j]));
        }
      }
      return ret;
    };
    var ft = function(a, b) {
      if (!(a instanceof Array)) a = [a];
      var ret = a.slice(0);
      ret.push(b);
      return ret;
    };
    //多个一起做笛卡尔积
    return (function(data) {
      var len = data.length;
      if (len == 0) return [];
      else {
        var r = data[0];
        for (var i = 1; i < len; i++) {
          r = twodDscartes(r, data[i]);
        }
        return r;
      }
    })(arguments.length > 1 ? arguments : arguments[0]);
  }
}
</script>

